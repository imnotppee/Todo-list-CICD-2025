import os
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÉ‡∏ô local)
load_dotenv()


class Config:
    """üîß Base configuration class"""
    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    @staticmethod
    def init_app(app):
        pass


class DevelopmentConfig(Config):
    """üß© Development configuration"""
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = os.getenv(
        'DATABASE_URL',
        'postgresql://postgres:postgres@db:5432/todo_dev'
    ).strip()


class TestingConfig(Config):
    """üß™ Testing configuration"""
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    WTF_CSRF_ENABLED = False


class ProductionConfig(Config):
    """üöÄ Production configuration"""
    DEBUG = False

    # ‚úÖ ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÉ‡∏ô DATABASE_URL ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error 'database "railway " does not exist'
    db_url = os.getenv('DATABASE_URL', '').strip()

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á URL
    if not db_url.startswith('postgresql://'):
        raise ValueError("Invalid DATABASE_URL: must start with 'postgresql://'")

    SQLALCHEMY_DATABASE_URI = db_url

    @classmethod
    def init_app(cls, app):
        Config.init_app(app)
        # Production-specific initialization
        assert os.getenv('DATABASE_URL'), 'DATABASE_URL must be set in production'


# ‚úÖ ‡πÉ‡∏ä‡πâ dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å config ‡∏ï‡∏≤‡∏° environment
config = {
    'development': DevelopmentConfig,
    'testing': TestingConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}
